openapi: 3.0.1
info:
  title: ManagementResourceApi
  description: Sample taken from random parts of the FeatureHub-IO (https://featurehub.io) API
  version: "1.1.1"
paths:
  /initiate-subscription:
    post:
      description: "Initiate the customer subscription process"
      security:
        - bearerAuth: [ ]
      operationId: initiateSubscription
      tags:
        - SubscriptionService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitiateSubscriptionRequest"
      responses:
        302:
          description: "redirected"
          headers:
            Location:
              schema:
                type: string
        400:
          description: "Bad request"
        401:
          description: "No permission"
        403:
          description: "Forbidden"
        422:
          description: "Incorrect data supplied"
  /mr-api/authentication/{id}/replaceTempPassword:
    parameters:
      - name: id
        description: "The id of the person to replace temporary password for"
        in: path
        schema:
          type: string
        required: true
      - name: includeGroups
        description: "Include groups for this this portfolio in results"
        in: query
        schema:
          type: boolean
      - name: includeApplications
        description: "Include applications for this portfolio in results"
        in: query
        schema:
          type: boolean
    put:
      tags:
        - AuthService
      description: "Replace temporary password"
      x-java-annotations: "@io.featurehub.mr.api.AllowedDuringPasswordReset"
      security:
        - bearerAuth: []
      operationId: replaceTempPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordReset"
      responses:
        "200":
          description: "Successfully reset temporary password"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenizedPerson"
  /api/v1/test:
    get:
      operationId: getTest
      parameters:
        - name: fred
          schema:
            type: number
          required: false
          in: query
        - name: mary
          schema:
            type: string
            format: date-time
          required: false
          in: query
        - name: etag
          in: header
          schema:
            type: string
          required: false
      tags:
        - InheritanceService
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TestDTO"
    post:
      operationId: postTest1
      tags:
        - InheritanceService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/TestDTO"
      responses:
        "201":
          description: "upcoming events"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AeItemVO"
        "207":
          description: "upcoming events"
          content:
            test/csv:
              schema:
                type: string
  /api/v1/test2:
    put:
      operationId: getTest2
      tags:
        - InheritanceService
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: "#/components/schemas/TestDTO"
#  /event/upcoming2:
#    post:
#      tags:
#        - ControlService
#      description: "Get the list of upcoming events"
#      operationId: upcomingEvents2
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              oneOf:
#                - $ref: '#/components/schemas/EventRequest'
#                - $ref: '#/components/schemas/EventResponse'
#              discriminator:
#                propertyName: discrim
#      responses:
#        "200":
#          description: "upcoming events"
#          content:
#            application/yaml:
#              schema:
#                $ref: "#/components/schemas/EventResponse"
  /hello/{id}/{id_hello}:
    parameters:
      - name: id
        schema:
          type: string
        in: path
        required: true
      - name: id_hello
        schema:
          type: string
        in: path
      - name: fred
        schema:
          type: number
        required: false
        in: query
      - name: mary
        schema:
          type: string
          format: date-time
        required: false
        in: query
    get:
      tags:
        - TestService
      operationId: helloOp
      responses:
        "200":
          description: "Resulting weird api"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/com.bluetrainsoftware.AddProps1"
  /hello2:
    get:
      tags:
        - TestService
      operationId: helloOp2
      responses:
        "200":
          description: "Resulting weird api"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/com.bluetrainsoftware.AddProps2"
#  /one-off:
#    post:
#      tags:
#        - TestService
#      operationId: helloOp3
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/MyRequest"
#      responses:
#        "200":
#          description: check
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/com.bluetrainsoftware.AddProps2"

  /nested-enum:
    get:
      tags:
        - TestService
      summary: Test a nested enum
      operationId: testEnum
      responses:
        200:
          $ref: '#/components/responses/NestedEnumResponse'

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    InitiateSubscriptionRequest:
      properties:
        id:
          type: string
          format: UUID
    PasswordReset:
      required:
        - password
      properties:
        password:
          type: string
        reactivate:
          type: boolean
    TokenizedPerson:
      required:
        - accessToken
        - refreshToken
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
#    MyRequest:
#      oneOf:
#        - $ref: "#/components/schemas/EventRequest"
#        - $ref: "#/components/schemas/AddProps3"
#      discriminator:
#        propertyName: discrim
#        mapping:
#          dog: "#/components/schemas/AddProps3"
    EventRequest:
      additionalProperties: true
      properties:
        user_id:
          type: string
        enable_to_watch:
          type: integer
        discrim:
          type: string
    EventResponse:
      properties:
        discrim:
          type: string
        error:
          type: integer
        error_msg:
          type: string
        listofNumbers:
          type: array
          items:
            type: number
        listOfIntegers:
          type: array
          items:
            type: integer
        listOfIntString:
          type: array
          items:
            type: string
            format: int-or-string
        dateEventsHappen:
          type: array
          items:
            type: string
            format: date
        whenEventsHappen:
          type: array
          items:
            type: string
            format: date-time
        eventStatuses:
          type: array
          items:
            $ref: "#/components/schemas/EventStatus"
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
    Event:
      properties:
        status:
          $ref: "#/components/schemas/EventStatus"
        id:
          type: string
          format: uuid
        title:
          type: string
        img:
          type: string
        imageUrl:
          type: string
        someUniqueSet:
          uniqueItems: true
          type: array
          items:
            type: number
    EventStatus:
      type: string
      enum:
        - streaming
        - Allocating
        - aLLocaTed
        - closing
        - closed
        - pendinG
        - archiving
    "com.bluetrainsoftware.AddProps1":
      properties:
        extra:
          type: object
          additionalProperties:
            items:
              type: string
            type: array
          description: "used extensively in k8s api and generates weird code"
        yet_other_things:
          type: object
          additionalProperties:
            items:
              type: integer
            type: array
        dependencies:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/com.bluetrainsoftware.AddProps2"
        groups:
          type: array
          description: "names groups this user is part of"
          items:
            type: string
        name:
          type: string
        mess$age:
          $ref: "#/components/schemas/Messages"
        $justObjects:
          type: array
          items:
            $ref: "#/components/schemas/JSONType"
        myIntegers:
          type: array
          items:
            type: integer
    "com.bluetrainsoftware.AddProps2":
      properties:
        extra:
          type: object
          additionalProperties:
            type: object
            properties:
              code:
                type: integer
              text:
                type: string
    AddProps3:
      properties:
        discrim:
          type: string
        readings:
          type: object
          additionalProperties:
            type: number
            format: decimal
        extra:
          type: object
          additionalProperties:
            type: array
            uniqueItems: true
            items:
              $ref: "#/components/schemas/TimeType"
        dependencies:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/JSONType"
        otherDeps:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SecondJsonType"
        yetMoreAdditional:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        mapWithComplexObject:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/Event"
        mapWithEnums:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/EventStatus"
    "com.bluetrain-software.AddProps4":
      properties:
        extra:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/TimeType"
    JSONType:
      description: "can be anything, no properties"
    SecondJsonType:
      description: "can be anything, no properties"
    TimeType:
      type: string
      format: date-time
    Messages:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Message'
    Message:
      type: object
      properties:
        code:
          type: integer
        text:
          type: string
    UniqueEventRequest:
      type: array
      uniqueItems: true
      items:
        $ref: "#/components/schemas/UniqueEvent"
    UniqueEvent:
      type: object
      properties:
        unique_url:
          type: string
    EnumsTest:
      type: array
      items:
        $ref: "#/components/schemas/JSONType"
    SampleObject:
      type: object
      properties:
        enums:
          $ref: "#/components/schemas/EnumsTest"
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps":
      description: "JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/)."
      properties:
        "$ref":
          type: string
        "$schema":
          type: string
        default:
          $ref: "#/components/schemas/JSONType"
        enum:
          items:
            $ref: "#/components/schemas/JSONType"
          type: array
        example:
          $ref: "#/components/schemas/JSONType"
    EnumsObjectTest:
      type: object
      properties:
        enums:
          type: array
          items:
            $ref: "#/components/schemas/JSONType"
    TestDTO:
      type: object
      properties:
        uniqueItemList:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        itemList:
          type: array
          items:
            type: integer
            format: int64
    AeItemVO:
      required:
        - item_type_id
        - textValue
      type: object
      properties:
        id:
          type: integer
          format: int32
        uuid:
          type: string
        item_type_id:
          type: integer
          format: int32
        itemSpecId:
          type: integer
          format: int32
        textValue:
          type: string
        '@class':
          type: string
      discriminator:
        propertyName: '@class'
        mapping:
          AeItemInteger: '#/components/schemas/AeItemIntegerVO'
          AeItemString: '#/components/schemas/AeItemStringVO'
    AeItemIntegerVO:
      allOf:
        - $ref: '#/components/schemas/AeItemVO'
        - type: object
          properties:
            value:
              type: integer
              format: int32
          required:
            - value
    AeItemStringVO:
      allOf:
        - $ref: '#/components/schemas/AeItemVO'
        - type: object
          properties:
            value:
              type: string
          required:
            - value
    SignupReplyError:
      properties:
        schema_version:
          type: string
        data:
          $ref: '#/components/schemas/SignupReplyErrorDetails'
    SignupReplyErrorDetails:
      properties:
        errors:
          additionalProperties:
            $ref: '#/components/schemas/SignupReplyErrorKV'
    SignupReplyErrorKV:
      additionalProperties:
        $ref: '#/components/schemas/SignupReplyErrorList'
    SignupReplyErrorList:
      type: array
      items:
        type: string
    BaseClass:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        clazz:
          type: string
#    SubClass:
#      allOf:
#        - $ref: "#/components/schema/BaseClass"
#        - type: object
#          properties:
#            seatType:
#              type: string
#    BaseClassWithDiscriminator:
#      type: object
#      required:
#        - id
#      properties:
#        id:
#          type: string
#          format: uuid
#        clazz:
#          type: string
#      discriminator:
#        propertyName: clazz
#    SubClassDiscrim:
#      allOf:
#        - $ref: "#/components/schema/BaseClassWithDiscriminator"
#        - type: object
#          properties:
#            seatType:
#              type: string

    NestedEnumResponse:
      type: object
      properties:
        enumProperty:
          type: string
          description: A nested enum
          example: typeOne
          enum:
            - typeOne
            - typeTwo
