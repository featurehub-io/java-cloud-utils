/**
 * {{#description}}{{.}}{{/description}}{{^description}}{{classname}}{{/description}}
 */
@JsonIgnoreProperties(ignoreUnknown=true)
{{>generatedAnnotation}}{{#discriminator}}{{>typeInfoAnnotation}}{{/discriminator}}{{>xmlAnnotation}}

{{#vendorExtensions.x-cloudevent-type}}
	@CloudEventType("{{vendorExtensions.x-cloudevent-type}}")
{{/vendorExtensions.x-cloudevent-type}}
{{#vendorExtensions.x-cloudevent-subject}}
	@CloudEventSubject("{{vendorExtensions.x-cloudevent-subject}}")
{{/vendorExtensions.x-cloudevent-subject}}
public class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{{#vendorExtensions.x-cloudevent-type}} implements TaggedCloudEvent{{/vendorExtensions.x-cloudevent-type}} {
{{#vendorExtensions.x-cloudevent-type}}
	public static final String CLOUD_EVENT_TYPE = "{{vendorExtensions.x-cloudevent-type}}";
{{/vendorExtensions.x-cloudevent-type}}
{{#vendorExtensions.x-cloudevent-subject}}
	public static final String CLOUD_EVENT_SUBJECT = "{{vendorExtensions.x-cloudevent-subject}}";
{{/vendorExtensions.x-cloudevent-subject}}
  {{#vars}}
    {{#isEnum}}
    {{^isContainer}}
{{>modelInnerEnum}}
    {{/isContainer}}
    {{#isContainer}}
    {{#mostInnerItems}}
{{>modelInnerEnum}}
    {{/mostInnerItems}}
    {{/isContainer}}
    {{/isEnum}}
  {{#jackson}}
  @JsonProperty("{{baseName}}")
  {{/jackson}}
	 // required {{{required}}} nullable {{{isNullable}}} default {{{defaultValue}}}
  {{^isNullable}}@org.jetbrains.annotations.NotNull{{/isNullable}}{{#isNullable}}@org.jetbrains.annotations.Nullable{{/isNullable}}
  private {{{datatypeWithEnum}}} {{name}}{{^isNullable}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/isNullable}};

  {{/vars}}
  {{#vars}}
  {{^isReadOnly}}
  public {{classname}} {{name}}(@org.jetbrains.annotations.{{^isNullable}}NotNull{{/isNullable}}{{#isNullable}}Nullable{{/isNullable}} {{{datatypeWithEnum}}} {{name}}) {
    this.{{name}} = {{name}};
    return this;
  }
  {{#isArray}}

  public {{classname}} add{{nameInCamelCase}}Item(@org.jetbrains.annotations.{{^items.isNullable}}NotNull{{/items.isNullable}}{{#items.isNullable}}Nullable{{/items.isNullable}} {{{items.datatypeWithEnum}}} {{name}}Item) {
    // if they are adding something to a non-nullable field and its null, lets make it non-nullable!
    if (this.{{name}} == null) {
      this.{{name}} = {{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}new java.util.LinkedList(){{/defaultValue}} ;
    }
    this.{{name}}.add({{name}}Item);
    return this;
  }
  {{/isArray}}
  {{#isMap}}

  public {{classname}} put{{nameInCamelCase}}Item({{vendorExtensions.x-property-ref}} key, @org.jetbrains.annotations.{{^items.isNullable}}NotNull{{/items.isNullable}}{{#items.isNullable}}Nullable{{/items.isNullable}} {{{items.datatypeWithEnum}}} {{name}}Item) {
  // if they are adding something to a non-nullable field and its null, lets make it non-nullable!
    if (this.{{name}} == null) {
	this.{{name}} = {{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}new java.util.LinkedHashMap<>(){{/defaultValue}};
    }

    this.{{name}}.put(key, {{name}}Item);
    return this;
  }
  {{/isMap}}

  {{/isReadOnly}}
   /**
  {{#description}}
   * {{description}}
  {{/description}}
  {{^description}}
   * Get {{name}}
  {{/description}}
  {{#minimum}}
   * minimum: {{minimum}}
  {{/minimum}}
  {{#maximum}}
   * maximum: {{maximum}}
  {{/maximum}}
   * @return {{name}}
  **/
{{#useBeanValidation}}{{>beanValidation}}{{/useBeanValidation}}
{{#vendorExtensions.extraAnnotation}}
  {{{vendorExtensions.extraAnnotation}}}
{{/vendorExtensions.extraAnnotation}}
  public {{{datatypeWithEnum}}} {{getter}}() {
    return {{name}};
  }
  {{^isReadOnly}}

  public void {{setter}}({{^isNullable}}@org.jetbrains.annotations.NotNull{{/isNullable}}{{#isNullable}}@org.jetbrains.annotations.Nullable{{/isNullable}} {{{datatypeWithEnum}}} {{name}}) {
    this.{{name}} = {{name}};
  }
  {{/isReadOnly}}

  {{/vars}}

  @Override
  public boolean equals(java.lang.Object o) {
  {{#useReflectionEqualsHashCode}}
    return EqualsBuilder.reflectionEquals(this, o);
  {{/useReflectionEqualsHashCode}}
  {{^useReflectionEqualsHashCode}}
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }{{#hasVars}}
    {{classname}} {{classVarName}} = ({{classname}}) o;
    return {{#vars}}{{#isByteArray}}Arrays{{/isByteArray}}{{^isByteArray}}Objects{{/isByteArray}}.{{^isArray}}equals{{/isArray}}{{#isArray}}deepEquals{{/isArray}}(this.{{name}}, {{classVarName}}.{{name}}){{^-last}} &&
        {{/-last}}{{/vars}}{{#parent}} &&
        super.equals(o){{/parent}};{{/hasVars}}{{^hasVars}}
    return {{#parent}}super.equals(o){{/parent}}{{^parent}}true{{/parent}};{{/hasVars}}
  {{/useReflectionEqualsHashCode}}
  }

  @Override
  public int hashCode() {
  {{#useReflectionEqualsHashCode}}
    return HashCodeBuilder.reflectionHashCode(this);
  {{/useReflectionEqualsHashCode}}
  {{^useReflectionEqualsHashCode}}
    return Objects.hash({{#vars}}{{^isByteArray}}{{name}}{{/isByteArray}}{{#isByteArray}}Arrays.hashCode({{name}}){{/isByteArray}}{{^-last}}, {{/-last}}{{/vars}}{{#parent}}{{#hasVars}}, {{/hasVars}}super.hashCode(){{/parent}});
  {{/useReflectionEqualsHashCode}}
  }



  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class {{classname}} {\n");
    {{#parent}}
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    {{/parent}}
    {{#vars}}
    sb.append("    {{name}}: ").append(toIndentedString({{name}})).append("\n");
    {{/vars}}
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


{{^x-no-copy}}
  public {{classname}} copy() {
    {{classname}} copy = new {{classname}}();

   {{#vars}}
     {{#isArray}}
       {{^isModel}}
    copy.{{setter}}(this.{{getter}}() == null ? null : new java.util.ArrayList<>(this.{{getter}}()));
       {{/isModel}}
       {{#isModel}}
    copy.{{setter}}(this.{{getter}}() == null ? null : this.{{getter}}().stream().map(t -> t.copy()).collect(java.util.stream.Collectors.toList()));
       {{/isModel}}
     {{/isArray}}
     {{#isMap}}
      {{^isModel}}
    copy.{{setter}}(this.{{getter}}() == null ? null : this.{{getter}}().entrySet().stream().collect(java.util.stream.Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
      {{/isModel}}
      {{#isModel}}
    copy.{{setter}}(this.{{getter}}() == null ? null : this.{{getter}}().entrySet().stream().collect(java.util.stream.Collectors.toMap(Map.Entry::getKey, t -> t.getValue().copy())));
      {{/isModel}}
     {{/isMap}}
     {{^isContainer}}
      {{#isFreeFormObject}}
    copy.{{setter}}(this.{{getter}}().copy());
      {{/isFreeFormObject}}
      {{^isFreeFormObject}}
    copy.{{setter}}(this.{{getter}}());
      {{/isFreeFormObject}}
     {{/isContainer}}
   {{/vars}}

    return copy;
  }
{{/x-no-copy}}
}
