import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.Map;
import java.util.HashMap;

/**
 * {{^description}}Gets or Sets {{{name}}}{{/description}}{{#description}}{{description}}{{/description}}
 */
public enum {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}} {
  {{#allowableValues}}{{#enumVars}}
  {{#enumDescription}}
  /**
   * {{enumDescription}}
   */
  {{/enumDescription}}
  {{{name}}}({{{value}}}){{^-last}},
  {{/-last}}{{/enumVars}};{{/allowableValues}}

  private {{{dataType}}} value;

  {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}}({{{dataType}}} value) {
    this.value = value;
  }

  @JsonValue
  {{#ebeanEnum}}
  @io.ebean.annotation.DbEnumValue
  {{/ebeanEnum}}
  {{#vendorExtensions.x-ebean-enum}}
  @io.ebean.annotation.DbEnumValue
  {{/vendorExtensions.x-ebean-enum}}
  public {{{dataType}}} getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public {{classname}} copy() {
    return this;
  }

  // can't use map.of
	private static Map<String,{{{classname}}}> fromValues = new HashMap<>();
  {{#vendorExtensions.x-enum-longname}}
	public static Map<String,String> nameMappings = new HashMap<>();
  {{/vendorExtensions.x-enum-longname}}

  static {
    {{#allowableValues}}{{#enumVars}}
	  fromValues.put({{{value}}}, {{{name}}});
    fromValues.put("{{{name}}}", {{{name}}});
    {{/enumVars}}{{/allowableValues}}
{{#vendorExtensions.x-enum-longname}}
	{{#allowableValues}}{{#enumVars}}
		nameMappings.put({{{value}}}, "{{{name}}}");
	{{/enumVars}}{{/allowableValues}}
{{/vendorExtensions.x-enum-longname}}
  }

  @JsonCreator
{{^vendorExtensions.x-must-be-valid}}@org.jetbrains.annotations.Nullable{{/vendorExtensions.x-must-be-valid}}
{{#vendorExtensions.x-must-be-valid}}@org.jetbrains.annotations.NotNull{{/vendorExtensions.x-must-be-valid}}
  public static {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}} fromValue({{^vendorExtensions.x-must-be-valid}}@org.jetbrains.annotations.Nullable{{/vendorExtensions.x-must-be-valid}}{{#vendorExtensions.x-must-be-valid}}@org.jetbrains.annotations.NotNull{{/vendorExtensions.x-must-be-valid}} String text) {
    {{^vendorExtensions.x-must-be-valid}}
	  if (text == null) return null;
	  return fromValues.get(text);
    {{/vendorExtensions.x-must-be-valid}}{{#vendorExtensions.x-must-be-valid}}
	{{{classname}}} val = fromValues.get(text);
	  if (val != null) { return val; }
	  throw new IllegalArgumentException("Unexpected value '" + text + "'");
{{/vendorExtensions.x-must-be-valid}}
  }
}
