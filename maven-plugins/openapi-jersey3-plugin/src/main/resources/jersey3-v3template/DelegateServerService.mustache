package {{package}};

import cd.connect.openapi.support.ReturnStatus;
import cd.connect.openapi.support.ApiClient;
import cd.connect.openapi.support.ApiResponse;
import cd.connect.openapi.support.Pair;
import java.io.InputStream;
{{^noFormData}}
import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
import org.glassfish.jersey.media.multipart.FormDataParam;
{{/noFormData}}
{{#jersey3}}
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.SecurityContext;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import jakarta.ws.rs.BadRequestException;
import jakarta.ws.rs.core.GenericType;
{{/jersey3}}
{{#jersey2}}
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.ws.rs.BadRequestException;
import javax.ws.rs.core.GenericType;
{{/jersey2}}
{{#prometheus}}
import cd.connect.jersey.prometheus.Prometheus;
{{/prometheus}}

{{#imports}}import {{import}};
{{/imports}}

{{^fullJavaUtil}}
  import java.util.ArrayList;
  import java.util.HashMap;
  import java.util.List;
  import java.util.Map;
{{/fullJavaUtil}}

{{>generatedAnnotation}}
{{#operations}}
	@Singleton
  public class {{classname}}Delegator implements {{classname}} {
{{#delegateHolderPackage}}
	private final {{delegateHolderPackage}}.{{classname}}Delegate delegate;

	@Inject
	public {{classname}}Delegator({{delegateHolderPackage}}.{{classname}}Delegate delegate) {
	  this.delegate = delegate;
	}
{{/delegateHolderPackage}}
{{^delegateHolderPackage}}
	private final {{classname}}Delegate delegate;

	@Inject
	public {{classname}}Delegator({{classname}}Delegate delegate) {
	  this.delegate = delegate;
	}
{{/delegateHolderPackage}}

  {{#operation}}

    /**
    * {{summary}}
    * {{notes}}
    {{#isDeprecated}}
      * @deprecated
    {{/isDeprecated}}
    */
    {{#isDeprecated}}
      @Deprecated
    {{/isDeprecated}}
    {{#prometheus}}@Prometheus(name = "{{operationId}}", help="{{#summary}}{{.}}{{/summary}}{{^summary}}{{notes}}{{/summary}}"){{/prometheus}}
    {{#vendorExtensions.statusCode}}@ReturnStatus(code={{vendorExtensions.statusCode}}){{/vendorExtensions.statusCode}}
    {{#vendorExtensions.x-java-annotations}}{{{.}}}{{/vendorExtensions.x-java-annotations}}
    public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}Response {{/returnType}}{{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{#authMethods}}{{#hasParams}}, {{/hasParams}}SecurityContext securityContext{{/authMethods}}) {
  {{#vendorExtensions.x-has-delegator-holder}}
	  {{#delegateHolderPackage}}
		  final {{{vendorExtensions.x-class-delegator-holder}}} holder = new {{{vendorExtensions.x-class-delegator-holder}}}();
	  {{/delegateHolderPackage}}
	  {{^delegateHolderPackage}}
      final {{classname}}Delegate.{{{vendorExtensions.x-class-delegator-holder}}} holder = new {{classname}}Delegate.{{{vendorExtensions.x-class-delegator-holder}}}();
	  {{/delegateHolderPackage}}
    {{#vendorExtensions.x-delegator-holder-params}}
      holder.{{paramName}} = {{paramName}};
    {{/vendorExtensions.x-delegator-holder-params}}
  {{/vendorExtensions.x-has-delegator-holder}}
    {{^vendorExtensions.x-java-is-response-void}}return {{/vendorExtensions.x-java-is-response-void}}
	    delegate.{{operationId}}({{{vendorExtensions.x-java-params}}} {{#vendorExtensions.x-has-delegator-holder}}{{#vendorExtensions.x-has-java-params}}, {{/vendorExtensions.x-has-java-params}}holder{{/vendorExtensions.x-has-delegator-holder}}{{{vendorExtensions.x-has-auth}}}{{#authMethods}}securityContext{{/authMethods}});
    }
  {{/operation}}
  }
{{/operations}}
